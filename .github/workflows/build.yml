name: Build FFmpeg

on:
  push:
    paths-ignore:
      - "**.md"
      - "LICENSE"
  workflow_dispatch:
    inputs:
      doRelease:
        description: "Publish new release"
        type: boolean
        default: false
        required: false
      buildOnly:
        description: "Only build ffmpeg"
        type: boolean
        default: false
        required: false

env:
  DOCKER_BUILDKIT: 1

jobs:
  Test_Full_Build:
    name: Test Full Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        target: [win64, linux64, linuxarm64, macos, androidarm64]
        variant: [lgpl-shared]
        quickbuild: [1, ""]
        exclude:
          - os: macos-latest
            target: linux64
          - os: macos-latest
            target: linuxarm64
          - os: ubuntu-latest
            target: macos
          - os: macos-latest
            target: androidarm64
          - os: ubuntu-latest
            target: win64
          - os: ubuntu-latest
            target: macos
          - os: macos-latest
            target: win64
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential yasm nasm xxd pkgconf curl wget unzip git subversion mercurial autoconf automake libtool libtool-bin autopoint gettext cmake clang meson ninja-build texinfo texi2html help2man flex bison groff gperf itstool ragel libc6-dev libssl-dev gtk-doc-tools gobject-introspection gawk ocaml ocamlbuild libnum-ocaml-dev indent p7zip-full python3-distutils python3-jinja2 python3-jsonschema python3-apt python-is-python3
          curl https://sh.rustup.rs -sSf | bash -s -- -y --no-modify-path
          cargo install cargo-c
          rm -rf "${CARGO_HOME}"/registry "${CARGO_HOME}"/git
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install openjpeg dav1d aom automake fdk-aac git lame libass libtool libvorbis libvpx opus sdl shtool texi2html theora wget x264 x265 xvid nasm
      - name: Android - Set up Java 17
        uses: actions/setup-java@v4
        if: startsWith(matrix.target, 'android')
        with:
          distribution: temurin
          java-version: 17
      - name: Set up JDK and Android SDK
        if: startsWith(matrix.target, 'android')
        run: |
          sudo rm -r /usr/local/lib/android/sdk/**
          export ANDROID_HOME=/usr/local/lib/android/sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROID_NDK_VERSION=23.2.8568313
          export ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}
          echo "ANDROID_HOME=$ANDROID_HOME" >> "$GITHUB_ENV"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_VERSION=$ANDROID_NDK_VERSION" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> "$GITHUB_ENV"
      - name: Android - Set up Android SDK
        if: ${{ inputs.platform == 'android' }}
        uses: android-actions/setup-android@v3
        with:
          packages: "ndk;${{ env.ANDROID_NDK_VERSION }} cmdline-tools;latest build-tools;34.0.0 platforms;android-34 cmake;3.22.1"
      - name: Build ffmpeg
        run: ./build.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ steps.strs.outputs.artifact_slug }}
          overwrite: true
          path: artifacts/*

  pre_check:
    name: Pre Checks
    if: ${{ github.event.inputs.buildOnly != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Repo Check
        run: |
          if [[ "$GITHUB_REPOSITORY" != "V-Sekai/ffmpeg-builds" ]]; then
            echo "When forking this repository to make your own builds, you have to adjust this check."
            echo "When doing so make sure to randomize the scheduled cron time above, in order to spread out the various build times as much as possible."
            echo "This has been put in place due to the enormous amounts of traffic hundreds/thousands of parallel builds can cause on external infrastructure."
            exit 1
          fi
          exit 0
